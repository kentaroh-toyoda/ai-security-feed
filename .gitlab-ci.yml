stages:
  - setup
  - execute
  - commit

variables:
  DOCKER_BUILDKIT: 1
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Scheduled job to run every 5 AM Singapore Time (21:00 UTC)
scheduled_run:
  stage: setup
  image: docker:latest
  services:
    - docker:dind
  only:
    - schedules
  timeout: 12h
  script:
    - echo "Starting scheduled article collection at $(date)"
    - pwd
    - ls -la
    - find . -name "sources.json" -type f 2>/dev/null || echo "sources.json not found"
    - find . -name "config.py" -type f 2>/dev/null || echo "config.py not found"
    - |
      if [ ! -f articles.rss ]; then
        echo "Creating empty articles.rss file"
        touch articles.rss
      fi
    - docker build -t article-collector .
    - |
      docker run --name temp-collector \
      -e LLM_PROVIDER=$LLM_PROVIDER \
      -e LLM_MODEL=$LLM_MODEL \
      -e LLM_API_KEY=$LLM_API_KEY \
      -e LLM_BASE_URL=$LLM_BASE_URL \
      -e BROWSER_ENABLED=$BROWSER_ENABLED \
      -e BROWSER_HEADLESS=$BROWSER_HEADLESS \
      -e STATIC_FETCH_TIMEOUT=$STATIC_FETCH_TIMEOUT \
      -e QDRANT_ENABLED=$QDRANT_ENABLED \
      -e QDRANT_URL=$QDRANT_URL \
      -e QDRANT_API_KEY=$QDRANT_API_KEY \
      -e QDRANT_COLLECTION=$QDRANT_COLLECTION \
      -e FETCH_FULL_CONTENT=$FETCH_FULL_CONTENT \
      -e FEED_URL=$FEED_URL \
      -e GITHUB_TOKEN=$GITHUB_TOKEN \
      article-collector \
      bash -c "python main.py sources.json --qdrant --verbose"
    - docker cp temp-collector:/app/articles.rss ./articles.rss
    - docker rm temp-collector
  artifacts:
    paths:
      - articles.rss
    expire_in: 1 week

# Alternative manual trigger job for testing
manual_run:
  stage: execute
  image: docker:latest
  services:
    - docker:dind
  only:
    - main
    - develop
  except:
    - schedules
  timeout: 12h
  script:
    - echo "Starting manual article collection at $(date)"
    - |
      if [ ! -f articles.rss ]; then
        echo "Creating empty articles.rss file"
        touch articles.rss
      fi
    - docker build -t article-collector .
    - |
      docker run --name temp-collector \
      -e LLM_PROVIDER=$LLM_PROVIDER \
      -e LLM_MODEL=$LLM_MODEL \
      -e LLM_API_KEY=$LLM_API_KEY \
      -e LLM_BASE_URL=$LLM_BASE_URL \
      -e BROWSER_ENABLED=$BROWSER_ENABLED \
      -e BROWSER_HEADLESS=$BROWSER_HEADLESS \
      -e STATIC_FETCH_TIMEOUT=$STATIC_FETCH_TIMEOUT \
      -e QDRANT_ENABLED=$QDRANT_ENABLED \
      -e QDRANT_URL=$QDRANT_URL \
      -e QDRANT_API_KEY=$QDRANT_API_KEY \
      -e QDRANT_COLLECTION=$QDRANT_COLLECTION \
      -e FETCH_FULL_CONTENT=$FETCH_FULL_CONTENT \
      -e FEED_URL=$FEED_URL \
      -e GITHUB_TOKEN=$GITHUB_TOKEN \
      article-collector \
      bash -c "python main.py sources.json --qdrant --verbose"
    - docker cp temp-collector:/app/articles.rss ./articles.rss
    - docker rm temp-collector
  artifacts:
    paths:
      - articles.rss
    expire_in: 1 week

# Commit the updated RSS feed to GitHub repository
commit_changes:
  stage: commit
  image: alpine:latest
  script:
    - apk add --no-cache git
    - |
      # Check if articles.rss exists
      if [ ! -f articles.rss ]; then
        echo "No articles.rss found, skipping GitHub push"
        exit 0
      fi

      # Configure git
      git config --global user.email "gitlab-ci@onedegree.hk"
      git config --global user.name "GitLab CI/CD"

      # Set up GitHub remote
      git remote set-url origin https://x-access-token:$GITHUB_TOKEN@github.com/kentaroh-toyoda/ai-security-feed.git

      # Fetch latest changes from remote
      git fetch origin

      # Switch to gh-pages branch
      git checkout -b gh-pages || git checkout gh-pages

      # Reset local branch to match remote (prevents push conflicts)
      git reset --hard origin/gh-pages

      # Add RSS file
      git add articles.rss

      # Always commit and push the latest generated articles.rss
      git commit -m "Update articles.rss - $(date '+%Y-%m-%d %H:%M:%S UTC')" --allow-empty
      git push origin gh-pages
      echo "Successfully committed and pushed updated articles.rss to GitHub"
  when: on_success

# Notification job on failure
notify_failure:
  stage: commit
  image: alpine:latest
  script:
    - echo "Article collection failed. Check the pipeline logs for details."
    - echo "Failure occurred at $(date)"
  when: on_failure
